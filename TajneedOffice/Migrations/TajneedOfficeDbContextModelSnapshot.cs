// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TajneedOffice.Data;

#nullable disable

namespace TajneedOffice.Migrations
{
    [DbContext(typeof(TajneedOfficeDbContext))]
    partial class TajneedOfficeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TajneedOffice.Models.Airbase", b =>
                {
                    b.Property<int>("AirbaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirbaseId"));

                    b.Property<string>("AirbaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AirbaseId");

                    b.HasIndex("AirbaseName")
                        .IsUnique();

                    b.ToTable("Airbases");

                    b.HasData(
                        new
                        {
                            AirbaseId = 1,
                            AirbaseName = "قيادة سلاح الجو السلطاني العماني",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 2,
                            AirbaseName = "قاعدة غلا وأكاديمية السلطان قابوس الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 3,
                            AirbaseName = "قاعدة السيب الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 4,
                            AirbaseName = "قاعدة صلالة الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 5,
                            AirbaseName = "قاعدة المصنعة الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 6,
                            AirbaseName = "قاعدة مصيرة الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 7,
                            AirbaseName = "قاعدة أدم الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 8,
                            AirbaseName = "قاعدة ثمريت الجوية",
                            IsActive = true
                        },
                        new
                        {
                            AirbaseId = 9,
                            AirbaseName = "قاعدة خصب الجوية",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("TajneedOffice.Models.Candidate", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentAirbaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentRankId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Major")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MarksGrade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalIdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ServiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("University")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CandidateId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentAirbaseId");

                    b.HasIndex("CurrentRankId");

                    b.HasIndex("NationalIdNumber")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryCode")
                        .IsUnique();

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("CandidateCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryCode = "CAT-PLT",
                            CategoryName = "المرشحيين الطيارين",
                            Description = "فئة المرشحين للالتحاق بسلاح الجو السلطاني العماني كمرشحين طيارين."
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryCode = "CAT-MUG",
                            CategoryName = "المرشحيين الجامعيين العسكريين",
                            Description = "خريجوا الكليات والجامعات من حملة البكالوريوس ويتم تقيمهم بناءا على تخصصاتهم المهنية وينضموا للسلاح كضباط عسكريين جامعيين"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryCode = "CAT-CUG",
                            CategoryName = "المرشحيين الجامعيين المدنيين",
                            Description = "خريجوا الكليات والجامعات من حملة البكالوريوس ويتم تقيمهم بناءا على تخصصاتهم المهنية وينضموا للسلاح كضباط مدنيين جامعيين"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryCode = "CAT-LSO",
                            CategoryName = "ضباط الخدمة المحدودة",
                            Description = "ضباط الصف من ذوي الخدمة المحدودة وسسبق لهم العمل في السلاح وهم برتبة وكيل فأعلى"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryCode = "CAT-NCO",
                            CategoryName = "ضباط الصف ( رقباء / عرفاء)",
                            Description = "ضباط صف برتبة رقيب أو عريف سبق لهم العمل بالسلاح"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryCode = "CAT-TCN",
                            CategoryName = "ضباط الصف الكلية التقنية العسكرية",
                            Description = "ضباط صف خريجوا الكلية العسكرية التقنية"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryCode = "CAT-CNP",
                            CategoryName = "ضباط الصف المدنيين للترفيع",
                            Description = "ضباط صف مدنيين مرشحين للترقية بالصفة المدنية"
                        });
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateTestResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("NumericScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TextResult")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("WeightedScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("TestResultId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("CandidateId", "TestTypeId")
                        .IsUnique();

                    b.ToTable("CandidateTestResults");
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateTestScores", b =>
                {
                    b.Property<Guid>("TestScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ArabicScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CommunicationSkillScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DrivingSkillScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EnglishScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FlightAptitudeScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GeneralCultureScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MathematicsScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProfessionalEvaluationScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TestScoreId");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.ToTable("CandidateTestScores");
                });

            modelBuilder.Entity("TajneedOffice.Models.CategoryTestPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("PathId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("CategoryId", "TestTypeId")
                        .IsUnique();

                    b.ToTable("CategoryTestPaths");
                });

            modelBuilder.Entity("TajneedOffice.Models.FinalEvaluation", b =>
                {
                    b.Property<int>("FinalEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalEvaluationId"));

                    b.Property<int>("AmbitionScore")
                        .HasColumnType("int");

                    b.Property<string>("AmbitionStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmbitionWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppearanceScore")
                        .HasColumnType("int");

                    b.Property<string>("AppearanceStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AwarenessScore")
                        .HasColumnType("int");

                    b.Property<string>("AwarenessStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwarenessWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommunicationScore")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalDecision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FinalGrade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("FinalPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("GeneralNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IntelligenceScore")
                        .HasColumnType("int");

                    b.Property<string>("IntelligenceStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntelligenceWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MainCommitteePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MainCommitteeScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PersonalityScore")
                        .HasColumnType("int");

                    b.Property<string>("PersonalityStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalityWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ProfessionalTestPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("ProfessionalTestScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("RecruitmentTestsPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("RecruitmentTestsScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ResponsibilityScore")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibilityStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibilityWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialSkillsScore")
                        .HasColumnType("int");

                    b.Property<string>("SocialSkillsStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialSkillsWeakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FinalEvaluationId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CandidateId1")
                        .IsUnique()
                        .HasFilter("[CandidateId1] IS NOT NULL");

                    b.ToTable("FinalEvaluations");
                });

            modelBuilder.Entity("TajneedOffice.Models.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankId"));

                    b.Property<string>("RankCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RankOrder")
                        .HasColumnType("int");

                    b.HasKey("RankId");

                    b.HasIndex("RankName")
                        .IsUnique();

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            RankId = 1,
                            RankCode = "RECRUIT",
                            RankName = "جندي",
                            RankOrder = 1
                        },
                        new
                        {
                            RankId = 2,
                            RankCode = "LANCE_CPL",
                            RankName = "نائب عريف",
                            RankOrder = 2
                        },
                        new
                        {
                            RankId = 3,
                            RankCode = "CORPORAL",
                            RankName = "عريف",
                            RankOrder = 3
                        },
                        new
                        {
                            RankId = 4,
                            RankCode = "SERGEANT",
                            RankName = "رقيب",
                            RankOrder = 4
                        },
                        new
                        {
                            RankId = 5,
                            RankCode = "STAFF_SGT",
                            RankName = "رقيب أول",
                            RankOrder = 5
                        },
                        new
                        {
                            RankId = 6,
                            RankCode = "WARRANT",
                            RankName = "وكيل",
                            RankOrder = 6
                        },
                        new
                        {
                            RankId = 7,
                            RankCode = "CHIEF_WARRANT",
                            RankName = "وكيل أول",
                            RankOrder = 7
                        },
                        new
                        {
                            RankId = 8,
                            RankCode = "CADET",
                            RankName = "ضابط مرشح",
                            RankOrder = 8
                        },
                        new
                        {
                            RankId = 9,
                            RankCode = "SECOND_LT",
                            RankName = "ملازم ثاني",
                            RankOrder = 9
                        },
                        new
                        {
                            RankId = 10,
                            RankCode = "FIRST_LT",
                            RankName = "ملازم أول",
                            RankOrder = 10
                        },
                        new
                        {
                            RankId = 11,
                            RankCode = "CAPTAIN",
                            RankName = "نقيب",
                            RankOrder = 11
                        },
                        new
                        {
                            RankId = 12,
                            RankCode = "MAJOR",
                            RankName = "رائد",
                            RankOrder = 12
                        },
                        new
                        {
                            RankId = 13,
                            RankCode = "LT_COLONEL",
                            RankName = "مقدم",
                            RankOrder = 13
                        },
                        new
                        {
                            RankId = 14,
                            RankCode = "COLONEL",
                            RankName = "عقيد",
                            RankOrder = 14
                        },
                        new
                        {
                            RankId = 15,
                            RankCode = "BRIGADIER",
                            RankName = "عميد",
                            RankOrder = 15
                        },
                        new
                        {
                            RankId = 16,
                            RankCode = "MAJ_GENERAL",
                            RankName = "لواء",
                            RankOrder = 16
                        },
                        new
                        {
                            RankId = 17,
                            RankCode = "LT_GENERAL",
                            RankName = "فريق",
                            RankOrder = 17
                        },
                        new
                        {
                            RankId = 18,
                            RankCode = "CIV_G16",
                            RankName = "مدني درجة 16",
                            RankOrder = 18
                        },
                        new
                        {
                            RankId = 19,
                            RankCode = "CIV_G15",
                            RankName = "مدني درجة 15",
                            RankOrder = 19
                        },
                        new
                        {
                            RankId = 20,
                            RankCode = "CIV_G14",
                            RankName = "مدني درجة 14",
                            RankOrder = 20
                        },
                        new
                        {
                            RankId = 21,
                            RankCode = "CIV_G13",
                            RankName = "مدني درجة 13",
                            RankOrder = 21
                        },
                        new
                        {
                            RankId = 22,
                            RankCode = "CIV_G12",
                            RankName = "مدني درجة 12",
                            RankOrder = 22
                        },
                        new
                        {
                            RankId = 23,
                            RankCode = "CIV_G11",
                            RankName = "مدني درجة 11",
                            RankOrder = 23
                        },
                        new
                        {
                            RankId = 24,
                            RankCode = "CIV_G10",
                            RankName = "مدني درجة 10",
                            RankOrder = 24
                        },
                        new
                        {
                            RankId = 25,
                            RankCode = "CIV_G9",
                            RankName = "مدني درجة 9",
                            RankOrder = 25
                        },
                        new
                        {
                            RankId = 26,
                            RankCode = "CIV_OFF_G8",
                            RankName = "ضابط مدني د8",
                            RankOrder = 26
                        },
                        new
                        {
                            RankId = 27,
                            RankCode = "CIV_OFF_G9",
                            RankName = "ضابط مدني د9",
                            RankOrder = 27
                        },
                        new
                        {
                            RankId = 28,
                            RankCode = "CIV_OFF_G7",
                            RankName = "ضابط مدني د7",
                            RankOrder = 28
                        },
                        new
                        {
                            RankId = 29,
                            RankCode = "CIV_OFF_G6",
                            RankName = "ضابط مدني د6",
                            RankOrder = 29
                        },
                        new
                        {
                            RankId = 30,
                            RankCode = "CIV_OFF_G5",
                            RankName = "ضابط مدني د5",
                            RankOrder = 30
                        },
                        new
                        {
                            RankId = 31,
                            RankCode = "CIV_OFF_G4",
                            RankName = "ضابط مدني د4",
                            RankOrder = 31
                        },
                        new
                        {
                            RankId = 32,
                            RankCode = "CIV_OFF_G3",
                            RankName = "ضابط مدني د3",
                            RankOrder = 32
                        },
                        new
                        {
                            RankId = 33,
                            RankCode = "CIV_OFF_G2",
                            RankName = "ضابط مدني د2",
                            RankOrder = 33
                        },
                        new
                        {
                            RankId = 34,
                            RankCode = "CIV_OFF_G1",
                            RankName = "ضابط مدني د1",
                            RankOrder = 34
                        });
                });

            modelBuilder.Entity("TajneedOffice.Models.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriteriaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MinScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PassingScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TestCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TestTypeId");

                    b.HasIndex("TestCode")
                        .IsUnique()
                        .HasFilter("[TestCode] IS NOT NULL");

                    b.HasIndex("TestName")
                        .IsUnique();

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("TajneedOffice.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.HasIndex("ServiceNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TajneedOffice.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TajneedOffice.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TajneedOffice.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TajneedOffice.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TajneedOffice.Models.Candidate", b =>
                {
                    b.HasOne("TajneedOffice.Models.CandidateCategory", "Category")
                        .WithMany("Candidates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TajneedOffice.Models.Airbase", "CurrentAirbase")
                        .WithMany("Candidates")
                        .HasForeignKey("CurrentAirbaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TajneedOffice.Models.Rank", "CurrentRank")
                        .WithMany("Candidates")
                        .HasForeignKey("CurrentRankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CurrentAirbase");

                    b.Navigation("CurrentRank");
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateTestResult", b =>
                {
                    b.HasOne("TajneedOffice.Models.Candidate", "Candidate")
                        .WithMany("TestResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TajneedOffice.Models.TestType", "TestType")
                        .WithMany("CandidateTestResults")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateTestScores", b =>
                {
                    b.HasOne("TajneedOffice.Models.Candidate", "Candidate")
                        .WithOne("TestScores")
                        .HasForeignKey("TajneedOffice.Models.CandidateTestScores", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("TajneedOffice.Models.CategoryTestPath", b =>
                {
                    b.HasOne("TajneedOffice.Models.CandidateCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TajneedOffice.Models.TestType", "TestType")
                        .WithMany("CategoryTestPaths")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("TajneedOffice.Models.FinalEvaluation", b =>
                {
                    b.HasOne("TajneedOffice.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TajneedOffice.Models.Candidate", null)
                        .WithOne("FinalEvaluation")
                        .HasForeignKey("TajneedOffice.Models.FinalEvaluation", "CandidateId1");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("TajneedOffice.Models.User", b =>
                {
                    b.HasOne("TajneedOffice.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("TajneedOffice.Models.Airbase", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("TajneedOffice.Models.Candidate", b =>
                {
                    b.Navigation("FinalEvaluation");

                    b.Navigation("TestResults");

                    b.Navigation("TestScores");
                });

            modelBuilder.Entity("TajneedOffice.Models.CandidateCategory", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("TajneedOffice.Models.Rank", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TajneedOffice.Models.TestType", b =>
                {
                    b.Navigation("CandidateTestResults");

                    b.Navigation("CategoryTestPaths");
                });
#pragma warning restore 612, 618
        }
    }
}
